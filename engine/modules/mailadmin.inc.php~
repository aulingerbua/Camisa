<?php
/** Class for administration of virtual doamins and mail adresses.
 * @author Armin Aulinger
 *
 */
class MailAdmin {
	private $db;
	/**
	 * Constructor function establishes the data base connection
	 *
	 * @param unknown $password
	 *        	password string
	 * @param string $host
	 *        	default is 127.0.0.1
	 * @param string $user
	 *        	default is mailuser
	 * @param string $database
	 *        	default is mailserver
	 * @throws mysqli_sql_exception
	 */
	function __construct($password, $host = "127.0.0.1", $user = "mailuser", $database = "mailserver") {
		$this->db = new mysqli ( $host, $user, $password, $database );
		if ($db->connect_errno)
			throw new mysqli_sql_exception ( $db->connect_error );
	}
	/**
	 * Shows the form for inserting, updating or deleting a mail address.
	 *
	 * @param array $iniValues
	 *        	initial values
	 */
	public function mailUser() {
		if ($email = $_GET ['email']) {
			$disabled = "readonly";
			$parts = explode ( "@", $email );
			$user = $parts [0];
			$currentDom = $parts [1];
		}
		$domains = self::getDomains ();
		?>
<form id="mailuser" method="post">
	<div class="box-inside-form">
		<div>
			<label for="email">Username</label> <input type="text" name="email"
				value="<?=$user?>" <?=$disabled?>> <label for="domain_id">Domain</label>
			<select name="domain_id" <?=$disabled?>>
			<?php if ($domains) :?>
			<?php foreach ($domains as $dom) :?>
			<option value="<?=$dom['id']?>"
					<?=$dom['name']==$currentDom ? "selected": ""?>><?=$dom['name']?></option>
			<?php endforeach;?>
			<?php endif;?>
			</select> <label for="password">Passwort</label> <input
				name="password" type="password">
		</div>
		<div>
		<?php self::userList()?>
		</div>
	</div>
	<input type="hidden" name="dbaction" value="email">
	<?php if ($email) :?>
	<input type="submit" name="do" value="Neues Passwort"> <input
		type="submit" name="do" value="Löschen">
	<?php else :?>
	<input type="submit" name="do" value="Speichern">
	<?php endif;?>
</form>
<?php
	}
	/**
	 * Shows the form for inserting or deleting mail domains
	 *
	 * @param array $iniValues
	 *        	initial values
	 */
	public function mailDomains(array $iniValues) {
		$disabled = ($name = $iniValues ['domain']) ? "disabled" : "";
		?>
<form id="maildomains" method="post">
	<div class="box-inside-form">
		<div>
			<label for="name">Domainname</label> <input type="text" name="name"
				value="<?=$name?>" <?=$disabled?>>
		</div>
		<div>
	<?php self::domainList ();?>
	</div>
	</div>
	<input type="hidden" name="dbaction" value="domains">
	<?php if ($name) :?>
	<input type="submit" name="do" value="Löschen">
	<?php else :?>
	<input type="submit" name="do" value="Speichern">
	<?php endif;?>
</form>
<?php
	}
	/**
	 * Shows the form for inserting and deleting mailing lists.
	 *
	 * @param array $iniValues
	 *        	initial values
	 */
	public function mailList(array $iniValues) {
		if ($list = $_GET ['list']) {
			$disabled = "readonly";
			$parts = explode ( "@", $list );
			$currentDom = $parts [1];
			$listName = $parts [0];
		} else
			$required = "required";
		$domains = self::getDomains ();
		?>
<form id="maillist" method="post">
	<div class="box-inside-form">
		<div>
			<label for="domain_id">Domain</label> <select name="domain_id"
				<?=$disabled?>>
				<?php if ($domains) : ?>
				<?php foreach ( $domains as $dom ) : ?>
				<?php
				
				if ($dom ['name'] == $currentDom) {
					$selected = "selected";
					$currentDomId = $dom ['id'];
				} else
					$selected = "";
				?>
					<option value="<?=$dom['id']?>" <?=$selected?>><?=$dom['name']?></option>
				<?php endforeach;?>
				</select> 
				<?php endif;?>
				<label for="source">Mailingliste</label> <input type="text"
				name="source" value="<?=$listName?>" <?=$disabled?> required> <label
				for="destination">Email</label> <input name="destination"
				type="email" <?=$required?>>
		</div>
		<div><?php if (! $list) self::sourcesList($currentDomId)?></div>
		<div id="list-members"><?php self::destinationsList($list,$currentDomId)?></div>
	</div>
	<input type="hidden" name="dbaction" value="maillist"> <input
		type="submit" name="do" value="Speichern">
		<?php if ($listName) :?>
		<input type="submit" name="do" value="Löschen">
		<?php endif;?>
	</form>
<?php
	}
	/**
	 * Inserts a new mail user
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function insertUser() {
		$name = self::getDomains ( $_POST ['domain_id'] ) [0] ['name'];
		$qry = "INSERT INTO virtual_users VALUES (NULL,";
		$qry .= $_POST ['domain_id'] . ",'";
		$qry .= $_POST ['email'] . "@" . $name . "','";
		$qry .= "{SHA256-CRYPT}$5$" . hash ( "sha256", $_POST ['password'] ) . "');";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Inserts a new mailing list and/or a new list member.
	 *
	 * When creating a new list, at least one member email must be provided.
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function createList() {
		if (! $dest = $_POST ['destination'])
			return;
		$name = self::getDomains ( $_POST ['domain_id'] ) [0] ['name'];
		$qry = "INSERT INTO virtual_aliases VALUES (NULL,";
		$qry .= $_POST ['domain_id'] . ",'";
		$qry .= $_POST ['source'] . "@" . $name . "','";
		$qry .= $dest . "');";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Deletes an emaillist and all its members from the virtual_aliases table.
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function deleteList() {
		$qry = "DELETE FROM virtual_aliases WHERE source='" . $_GET ['list'] . "';";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Deletes a user from a mailing list, ie.e it deletes a row from the virtual_aliases table.
	 *
	 * @param string $list
	 *        	name of the list (source)
	 * @param string $email
	 *        	email of the list member (destination)
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function deleteFromList($list, $email) {
		$qry = "DELETE FROM virtual_aliases WHERE source='$list' AND destination='$email';";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
		return true;
	}
	/**
	 * Deletes a mail user
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function deleteUser() {
		$name = self::getDomains ( $_POST ['domain_id'] ) [0] ['name'];
		$qry = "DELETE FROM virtual_users WHERE email='" . $_POST ['email'] . "@$name';";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Creates a new user password
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function updateUserPassword() {
		$name = self::getDomains ( $_POST ['domain_id'] ) [0] ['name'];
		$pw = "{SHA256-CRYPT}$5$" . hash ( "sha256", $_POST ['password'] );
		$qry = "UPDATE virtual_users SET password='$pw' WHERE email='" . $_POST ['email'] . "@$name';";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Inserts a new domain name
	 *
	 * @param $name the
	 *        	name of the domain.
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function insertDomain($name) {
		$qry = "INSERT INTO virtual_domains VALUES (NULL,'$name');";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Deletes a domain name and all users having an email address in it.
	 *
	 * @param $namename of
	 *        	the domain
	 * @throws mysqli_sql_exception
	 * @return boolean
	 */
	public function deleteDomain($name) {
		$qry = "DELETE FROM virtual_domains WHERE name='$name';";
		if (! $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
	}
	/**
	 * Retrieves all domain names.
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean|unknown
	 */
	public function getDomains($id = NULL) {
		$qry = "SELECT name,id FROM virtual_domains";
		if ($id)
			$qry .= " WHERE id='$id'";
		$qry .= " ORDER BY id;";
		if (! $res = $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
		while ( $set = $res->fetch_assoc () )
			$data [] = $set;
		return $data;
	}
	/**
	 * Retrieves all mail user names.
	 *
	 * @throws mysqli_sql_exception
	 * @return boolean|unknown
	 */
	public function getUsers() {
		$qry = "SELECT email FROM virtual_users ORDER BY domain_id;";
		if (! $res = $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
		while ( $set = $res->fetch_assoc () )
			$data [] = $set ['email'];
		return $data;
	}
	/**
	 * Retrieves all virtual alias sources.
	 *
	 * @param $domainId A
	 *        	domain id. If present only sources (lists) from that domain are received.
	 * @throws mysqli_sql_exception
	 * @return boolean|unknown
	 */
	public function getVaSources($domainId = NULL) {
		$qry = "SELECT DISTINCT source FROM virtual_aliases";
		if ($domainId)
			$qry .= " WHERE domain_id=$domainId;";
		if (! $res = $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
		while ( $set = $res->fetch_assoc () )
			$data [] = $set ['source'];
		return $data;
	}
	/**
	 * Retrieves all virtual alias destinations.
	 *
	 * @param $domainId A
	 *        	domain id. If present only sources (lists) from that domain are received.
	 * @throws mysqli_sql_exception
	 * @return boolean|unknown
	 */
	public function getVaDestinations($source, $domainId = NULL) {
		if (! $source)
			return false;
		$qry = "SELECT destination FROM virtual_aliases WHERE source='$source'";
		if ($domainId)
			$qry .= " AND domain_id=$domainId";
		$qry .= " ORDER BY domain_id;";
		if (! $res = $this->db->query ( $qry )) {
			throw new mysqli_sql_exception ( $this->db->error );
			return false;
		}
		while ( $set = $res->fetch_assoc () )
			$data [] = $set ['destination'];
		return $data;
	}
	/**
	 * Shows the list of destinations from the virtual aliases table as links.
	 */
	public function destinationsList($source, $domainId = NULL) {
		if (! $trg = self::getVaDestinations ( $source, $domainId = NULL ))
			return;
		$list [] = "<h2>Mitglieder</h2>";
		$list [] = "<ul>";
		foreach ( $trg as $t )
			$list [] = "<li><a href='?tool=mailadmin&mailadmin=maillists&list=" . $_GET ['list'] . "'>" . $t . "</a></li>";
		$list [] = "</ul>";
		echo implode ( "\n", $list );
	}
	/**
	 * Shows the list of sources from the virtual aliases table as links.
	 */
	public function sourcesList($domainId = NULL) {
		if (! $src = self::getVaSources ( $domainId = NULL ))
			return;
		$list [] = "<h2>Listen</h2>";
		$list [] = "<ul>";
		foreach ( $src as $s )
			$list [] = "<li><a href='?tool=mailadmin&mailadmin=maillists&list=" . $s . "'>" . $s . "</a></li>";
		$list [] = "</ul>";
		echo implode ( "\n", $list );
	}
	/**
	 * Shows the list of domains as links.
	 */
	public function domainList() {
		if (! $dom = self::getDomains ())
			return;
		$list [] = "<h2>Domains</h2>";
		$list [] = "<ul>";
		foreach ( $dom as $d )
			$list [] = "<li><a href='?tool=mailadmin&mailadmin=domains&domain=" . $d ['name'] . "'>" . $d ['name'] . "</a></li>";
		$list [] = "</ul>";
		echo implode ( "\n", $list );
	}
	/**
	 * Shows the list of users as links.
	 */
	public function userList() {
		if (! $usr = self::getUsers ())
			return;
		$list [] = "<h2>Emails</h2>";
		$list [] = "<ul>";
		foreach ( $usr as $u )
			$list [] = "<li><a href='?tool=mailadmin&mailadmin=emails&email=$u'>$u</a></li>";
		$list [] = "</ul>";
		echo implode ( "\n", $list );
	}
	/**
	 * Performes the insert, update, delete actions in the mailserver data base.
	 *
	 * @param array $values
	 *        	values that determin the actions.
	 */
	public function dbAction() {
		if (! $dbaction = $_POST ['dbaction'])
			return;
		$do = $_POST ['do'];
		$log = start_system_log ( "MailAdmin::dbAction" );
		try {
			if ($dbaction == "domains") {
				if ($do == "Speichern")
					self::insertDomain ( $_POST ['name'] );
				elseif ($do == "Löschen")
					self::deleteDomain ( $_GET ['domain'] );
			}
			if ($dbaction == "email") {
				if ($do == "Speichern")
					self::insertUser ( $_POST ['name'] );
				elseif ($do == "Löschen")
					self::deleteUser ( $_GET ['email'] );
				elseif ($do == "Neues Passwort")
					self::updateUserPassword ( $_POST ['password'] );
			}
			if ($dbaction == "maillist") {
				if ($do == "Speichern")
					self::createList ();
				elseif ($do == "Löschen")
					self::deleteList ();
			}
		} catch ( mysqli_sql_exception $e ) {
			$log->write ( $e->getMessage (), LOG_WARN );
		}
	}
}